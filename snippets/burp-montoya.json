{
  "Basic Burp Extension": {
    "prefix": "burp-basic",
    "body": [
      "package ${1:com.example.burp};",
      "",
      "import burp.api.montoya.BurpExtension;",
      "import burp.api.montoya.MontoyaApi;",
      "",
      "/**",
      " * ${2:ExtensionName} - Basic Burp Suite Extension",
      " * ",
      " * @author ${3:Your Name}",
      " */",
      "public class ${2:ExtensionName} implements BurpExtension {",
      "    private MontoyaApi api;",
      "",
      "    @Override",
      "    public void initialize(MontoyaApi api) {",
      "        this.api = api;",
      "        ",
      "        // Set extension name",
      "        api.extension().setName(\"${2:ExtensionName}\");",
      "        ",
      "        // Log initialization",
      "        api.logging().logToOutput(\"${2:ExtensionName} extension loaded successfully!\");",
      "        ",
      "        // Add your extension logic here",
      "        ${4:// TODO: Implement extension functionality}",
      "    }",
      "}"
    ],
    "description": "Basic Burp Suite extension template"
  },
  "HTTP Handler Extension": {
    "prefix": "burp-http-handler",
    "body": [
      "package ${1:com.example.burp};",
      "",
      "import burp.api.montoya.BurpExtension;",
      "import burp.api.montoya.MontoyaApi;",
      "import burp.api.montoya.http.handler.HttpHandler;",
      "import burp.api.montoya.http.handler.HttpRequestToBeSent;",
      "import burp.api.montoya.http.handler.HttpResponseReceived;",
      "import burp.api.montoya.http.handler.RequestToBeSentAction;",
      "import burp.api.montoya.http.handler.ResponseReceivedAction;",
      "",
      "/**",
      " * ${2:ExtensionName} - HTTP Handler Extension",
      " * ",
      " * @author ${3:Your Name}",
      " */",
      "public class ${2:ExtensionName} implements BurpExtension, HttpHandler {",
      "    private MontoyaApi api;",
      "",
      "    @Override",
      "    public void initialize(MontoyaApi api) {",
      "        this.api = api;",
      "        ",
      "        // Set extension name",
      "        api.extension().setName(\"${2:ExtensionName}\");",
      "        ",
      "        // Register HTTP handler",
      "        api.http().registerHttpHandler(this);",
      "        ",
      "        // Log initialization",
      "        api.logging().logToOutput(\"${2:ExtensionName} extension loaded successfully!\");",
      "    }",
      "",
      "    @Override",
      "    public RequestToBeSentAction handleHttpRequestToBeSent(HttpRequestToBeSent requestToBeSent) {",
      "        // Process outgoing HTTP requests here",
      "        api.logging().logToOutput(\"Processing request to: \" + requestToBeSent.url());",
      "        ",
      "        ${4:// TODO: Add request processing logic}",
      "        ",
      "        // Return the request unchanged (or modify as needed)",
      "        return RequestToBeSentAction.continueWith(requestToBeSent);",
      "    }",
      "",
      "    @Override",
      "    public ResponseReceivedAction handleHttpResponseReceived(HttpResponseReceived responseReceived) {",
      "        // Process incoming HTTP responses here",
      "        api.logging().logToOutput(\"Received response from: \" + responseReceived.initiatingRequest().url());",
      "        ",
      "        ${5:// TODO: Add response processing logic}",
      "        ",
      "        // Return the response unchanged (or modify as needed)",
      "        return ResponseReceivedAction.continueWith(responseReceived);",
      "    }",
      "}"
    ],
    "description": "Burp Suite extension with HTTP handler"
  },
  "Proxy Handler Extension": {
    "prefix": "burp-proxy-handler",
    "body": [
      "package ${1:com.example.burp};",
      "",
      "import burp.api.montoya.BurpExtension;",
      "import burp.api.montoya.MontoyaApi;",
      "import burp.api.montoya.proxy.http.InterceptedRequest;",
      "import burp.api.montoya.proxy.http.InterceptedResponse;",
      "import burp.api.montoya.proxy.http.ProxyRequestHandler;",
      "import burp.api.montoya.proxy.http.ProxyRequestReceivedAction;",
      "import burp.api.montoya.proxy.http.ProxyRequestToBeSentAction;",
      "import burp.api.montoya.proxy.http.ProxyResponseHandler;",
      "import burp.api.montoya.proxy.http.ProxyResponseReceivedAction;",
      "import burp.api.montoya.proxy.http.ProxyResponseToBeSentAction;",
      "",
      "/**",
      " * ${2:ExtensionName} - Proxy Handler Extension",
      " * ",
      " * @author ${3:Your Name}",
      " */",
      "public class ${2:ExtensionName} implements BurpExtension, ProxyRequestHandler, ProxyResponseHandler {",
      "    private MontoyaApi api;",
      "",
      "    @Override",
      "    public void initialize(MontoyaApi api) {",
      "        this.api = api;",
      "        ",
      "        // Set extension name",
      "        api.extension().setName(\"${2:ExtensionName}\");",
      "        ",
      "        // Register proxy handlers",
      "        api.proxy().registerRequestHandler(this);",
      "        api.proxy().registerResponseHandler(this);",
      "        ",
      "        // Log initialization",
      "        api.logging().logToOutput(\"${2:ExtensionName} extension loaded successfully!\");",
      "    }",
      "",
      "    @Override",
      "    public ProxyRequestReceivedAction handleRequestReceived(InterceptedRequest interceptedRequest) {",
      "        // Handle intercepted requests",
      "        api.logging().logToOutput(\"Intercepted request to: \" + interceptedRequest.url());",
      "        ",
      "        ${4:// TODO: Add request interception logic}",
      "        ",
      "        return ProxyRequestReceivedAction.continueWith(interceptedRequest);",
      "    }",
      "",
      "    @Override",
      "    public ProxyRequestToBeSentAction handleRequestToBeSent(InterceptedRequest interceptedRequest) {",
      "        // Handle requests about to be sent",
      "        api.logging().logToOutput(\"Sending request to: \" + interceptedRequest.url());",
      "        ",
      "        ${5:// TODO: Add request modification logic}",
      "        ",
      "        return ProxyRequestToBeSentAction.continueWith(interceptedRequest);",
      "    }",
      "",
      "    @Override",
      "    public ProxyResponseReceivedAction handleResponseReceived(InterceptedResponse interceptedResponse) {",
      "        // Handle intercepted responses",
      "        api.logging().logToOutput(\"Intercepted response from: \" + interceptedResponse.initiatingRequest().url());",
      "        ",
      "        ${6:// TODO: Add response interception logic}",
      "        ",
      "        return ProxyResponseReceivedAction.continueWith(interceptedResponse);",
      "    }",
      "",
      "    @Override",
      "    public ProxyResponseToBeSentAction handleResponseToBeSent(InterceptedResponse interceptedResponse) {",
      "        // Handle responses about to be sent",
      "        api.logging().logToOutput(\"Sending response from: \" + interceptedResponse.initiatingRequest().url());",
      "        ",
      "        ${7:// TODO: Add response modification logic}",
      "        ",
      "        return ProxyResponseToBeSentAction.continueWith(interceptedResponse);",
      "    }",
      "}"
    ],
    "description": "Burp Suite extension with proxy handler"
  },
  "Scanner Extension": {
    "prefix": "burp-scanner",
    "body": [
      "package ${1:com.example.burp};",
      "",
      "import burp.api.montoya.BurpExtension;",
      "import burp.api.montoya.MontoyaApi;",
      "import burp.api.montoya.scanner.ScanCheck;",
      "import burp.api.montoya.scanner.audit.insertionpoint.AuditInsertionPoint;",
      "import burp.api.montoya.scanner.audit.issues.AuditIssue;",
      "import burp.api.montoya.http.message.HttpRequestResponse;",
      "import java.util.List;",
      "import java.util.ArrayList;",
      "",
      "/**",
      " * ${2:ExtensionName} - Scanner Extension",
      " * ",
      " * @author ${3:Your Name}",
      " */",
      "public class ${2:ExtensionName} implements BurpExtension, ScanCheck {",
      "    private MontoyaApi api;",
      "",
      "    @Override",
      "    public void initialize(MontoyaApi api) {",
      "        this.api = api;",
      "        ",
      "        // Set extension name",
      "        api.extension().setName(\"${2:ExtensionName}\");",
      "        ",
      "        // Register scan check",
      "        api.scanner().registerScanCheck(this);",
      "        ",
      "        // Log initialization",
      "        api.logging().logToOutput(\"${2:ExtensionName} extension loaded successfully!\");",
      "    }",
      "",
      "    @Override",
      "    public List<AuditIssue> audit(HttpRequestResponse baseRequestResponse, AuditInsertionPoint auditInsertionPoint) {",
      "        List<AuditIssue> issues = new ArrayList<>();",
      "        ",
      "        // Implement your custom scan logic here",
      "        api.logging().logToOutput(\"Scanning: \" + baseRequestResponse.request().url());",
      "        ",
      "        ${4:// TODO: Implement scan logic}",
      "        // Example: Check for a specific vulnerability pattern",
      "        // Add your scan logic and create AuditIssue objects for findings",
      "        ",
      "        return issues;",
      "    }",
      "}"
    ],
    "description": "Burp Suite extension with scanner functionality"
  },
  "UI Extension": {
    "prefix": "burp-ui",
    "body": [
      "package ${1:com.example.burp};",
      "",
      "import burp.api.montoya.BurpExtension;",
      "import burp.api.montoya.MontoyaApi;",
      "import burp.api.montoya.ui.UserInterface;",
      "import javax.swing.*;",
      "import java.awt.*;",
      "",
      "/**",
      " * ${2:ExtensionName} - UI Extension",
      " * ",
      " * @author ${3:Your Name}",
      " */",
      "public class ${2:ExtensionName} implements BurpExtension {",
      "    private MontoyaApi api;",
      "",
      "    @Override",
      "    public void initialize(MontoyaApi api) {",
      "        this.api = api;",
      "        ",
      "        // Set extension name",
      "        api.extension().setName(\"${2:ExtensionName}\");",
      "        ",
      "        // Create and register custom UI tab",
      "        JPanel mainPanel = createMainPanel();",
      "        api.userInterface().registerSuiteTab(\"${2:ExtensionName}\", mainPanel);",
      "        ",
      "        // Log initialization",
      "        api.logging().logToOutput(\"${2:ExtensionName} extension loaded successfully!\");",
      "    }",
      "",
      "    private JPanel createMainPanel() {",
      "        JPanel panel = new JPanel(new BorderLayout());",
      "        ",
      "        // Add your UI components here",
      "        JLabel titleLabel = new JLabel(\"${2:ExtensionName} Extension\", SwingConstants.CENTER);",
      "        titleLabel.setFont(new Font(\"Arial\", Font.BOLD, 16));",
      "        panel.add(titleLabel, BorderLayout.NORTH);",
      "        ",
      "        JTextArea textArea = new JTextArea(\"Welcome to ${2:ExtensionName}!\\\\n\\\\nThis is a custom UI extension.\");",
      "        textArea.setEditable(false);",
      "        textArea.setBackground(panel.getBackground());",
      "        panel.add(new JScrollPane(textArea), BorderLayout.CENTER);",
      "        ",
      "        JButton actionButton = new JButton(\"Perform Action\");",
      "        actionButton.addActionListener(e -> {",
      "            api.logging().logToOutput(\"Action button clicked!\");",
      "            JOptionPane.showMessageDialog(panel, \"Action performed successfully!\");",
      "        });",
      "        ",
      "        JPanel buttonPanel = new JPanel();",
      "        buttonPanel.add(actionButton);",
      "        panel.add(buttonPanel, BorderLayout.SOUTH);",
      "        ",
      "        ${4:// TODO: Add more UI components}",
      "        ",
      "        return panel;",
      "    }",
      "}"
    ],
    "description": "Burp Suite extension with custom UI"
  },
  "Context Menu Extension": {
    "prefix": "burp-context-menu",
    "body": [
      "package ${1:com.example.burp};",
      "",
      "import burp.api.montoya.BurpExtension;",
      "import burp.api.montoya.MontoyaApi;",
      "import burp.api.montoya.ui.contextmenu.ContextMenuEvent;",
      "import burp.api.montoya.ui.contextmenu.ContextMenuItemsProvider;",
      "import javax.swing.*;",
      "import java.awt.event.ActionEvent;",
      "import java.awt.event.ActionListener;",
      "import java.util.ArrayList;",
      "import java.util.List;",
      "",
      "/**",
      " * ${2:ExtensionName} - Context Menu Extension",
      " * ",
      " * @author ${3:Your Name}",
      " */",
      "public class ${2:ExtensionName} implements BurpExtension, ContextMenuItemsProvider {",
      "    private MontoyaApi api;",
      "",
      "    @Override",
      "    public void initialize(MontoyaApi api) {",
      "        this.api = api;",
      "        ",
      "        // Set extension name",
      "        api.extension().setName(\"${2:ExtensionName}\");",
      "        ",
      "        // Register context menu provider",
      "        api.userInterface().registerContextMenuItemsProvider(this);",
      "        ",
      "        // Log initialization",
      "        api.logging().logToOutput(\"${2:ExtensionName} extension loaded successfully!\");",
      "    }",
      "",
      "    @Override",
      "    public List<JMenuItem> provideMenuItems(ContextMenuEvent event) {",
      "        List<JMenuItem> menuItems = new ArrayList<>();",
      "        ",
      "        // Create custom menu item",
      "        JMenuItem customAction = new JMenuItem(\"${2:ExtensionName} Action\");",
      "        customAction.addActionListener(new ActionListener() {",
      "            @Override",
      "            public void actionPerformed(ActionEvent e) {",
      "                performCustomAction(event);",
      "            }",
      "        });",
      "        ",
      "        menuItems.add(customAction);",
      "        ",
      "        ${4:// TODO: Add more menu items}",
      "        ",
      "        return menuItems;",
      "    }",
      "",
      "    private void performCustomAction(ContextMenuEvent event) {",
      "        api.logging().logToOutput(\"Custom action performed!\");",
      "        ",
      "        // Add your custom logic here",
      "        if (event.messageEditorRequestResponse().isPresent()) {",
      "            var requestResponse = event.messageEditorRequestResponse().get().requestResponse();",
      "            api.logging().logToOutput(\"Processing request to: \" + requestResponse.request().url());",
      "        }",
      "        ",
      "        ${5:// TODO: Implement custom action logic}",
      "    }",
      "}"
    ],
    "description": "Burp Suite extension with context menu"
  },
  "Initialize Method": {
    "prefix": "burp-initialize",
    "body": [
      "@Override",
      "public void initialize(MontoyaApi api) {",
      "    this.api = api;",
      "    ",
      "    // Set extension name",
      "    api.extension().setName(\"${1:Extension Name}\");",
      "    ",
      "    // Log initialization",
      "    api.logging().logToOutput(\"${1:Extension Name} extension loaded successfully!\");",
      "    ",
      "    ${2:// TODO: Add initialization logic}",
      "}"
    ],
    "description": "Initialize method for Burp extension"
  },
  "HTTP Request Handler": {
    "prefix": "burp-http-request-handler",
    "body": [
      "@Override",
      "public RequestToBeSentAction handleHttpRequestToBeSent(HttpRequestToBeSent requestToBeSent) {",
      "    // Process outgoing HTTP requests here",
      "    api.logging().logToOutput(\"Processing request to: \" + requestToBeSent.url());",
      "    ",
      "    ${1:// TODO: Add request processing logic}",
      "    ",
      "    // Return the request unchanged (or modify as needed)",
      "    return RequestToBeSentAction.continueWith(requestToBeSent);",
      "}"
    ],
    "description": "HTTP request handler method"
  },
  "HTTP Response Handler": {
    "prefix": "burp-http-response-handler",
    "body": [
      "@Override",
      "public ResponseReceivedAction handleHttpResponseReceived(HttpResponseReceived responseReceived) {",
      "    // Process incoming HTTP responses here",
      "    api.logging().logToOutput(\"Received response from: \" + responseReceived.initiatingRequest().url());",
      "    ",
      "    ${1:// TODO: Add response processing logic}",
      "    ",
      "    // Return the response unchanged (or modify as needed)",
      "    return ResponseReceivedAction.continueWith(responseReceived);",
      "}"
    ],
    "description": "HTTP response handler method"
  },
  "Scan Check Method": {
    "prefix": "burp-scan-check",
    "body": [
      "@Override",
      "public List<AuditIssue> audit(HttpRequestResponse baseRequestResponse, AuditInsertionPoint auditInsertionPoint) {",
      "    List<AuditIssue> issues = new ArrayList<>();",
      "    ",
      "    // Implement your custom scan logic here",
      "    api.logging().logToOutput(\"Scanning: \" + baseRequestResponse.request().url());",
      "    ",
      "    ${1:// TODO: Implement scan logic}",
      "    ",
      "    return issues;",
      "}"
    ],
    "description": "Scan check audit method"
  },
  "Log to Output": {
    "prefix": "burp-log-output",
    "body": [
      "api.logging().logToOutput(\"${1:message}\");"
    ],
    "description": "Log message to output stream"
  },
  "Log to Error": {
    "prefix": "burp-log-error",
    "body": [
      "api.logging().logToError(\"${1:message}\");"
    ],
    "description": "Log message to error stream"
  },
  "Raise Info Event": {
    "prefix": "burp-info-event",
    "body": [
      "api.logging().raiseInfoEvent(\"${1:message}\");"
    ],
    "description": "Raise an info event"
  },
  "Register HTTP Handler": {
    "prefix": "burp-register-http-handler",
    "body": [
      "api.http().registerHttpHandler(${1:handler});"
    ],
    "description": "Register an HTTP handler"
  },
  "Register Proxy Handler": {
    "prefix": "burp-register-proxy-handler",
    "body": [
      "api.proxy().registerRequestHandler(${1:requestHandler});",
      "api.proxy().registerResponseHandler(${2:responseHandler});"
    ],
    "description": "Register proxy handlers"
  },
  "Register Suite Tab": {
    "prefix": "burp-register-tab",
    "body": [
      "api.userInterface().registerSuiteTab(\"${1:Tab Name}\", ${2:component});"
    ],
    "description": "Register a custom suite tab"
  }
}